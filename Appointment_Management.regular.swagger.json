
{
  "swagger": "2.0",
  "info": {
    "description": "## TMF API Reference : TMF 646 - Appointment\n\n### Release : Pre-release 18.0 - February 2018\n\nAppointment API is one of Pre-Ordering Management API Family. An Appointment is an arrangement to do something or meet someone at a particular time and place. It is previously made during an interaction or may be necessary to solve a customer problem or to deliver a product order item. The appointment API goal is to manage an appointment with all the necessary characteristics. First, the API consists in searching free slots based on given parameters. Then, the appointment is created. The appointment has characteristics such as nature of appointment, place of appointment…\n\n### Resources\n- Appointment\n- AvailableSlot\n- Hub\n\n### Operations\nAppointment API performs the following operations :\n- Retrieve available slots depending on filter criteria\n- Retrieve an appointment or a collection of appointments\n- Create an appointment\n- Cancel an appointment \n- Update an appointment\n- Reschedule an appointment\n- Notify events on appointment\n\nCopyright © TM Forum 2018. All Rights Reserved",
    "version": "3.0.0",
    "title": "API Appointment"
  },
  "host": "serverRoot",
  "basePath":	"/tmf-api/appointmentManagement/v3/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json;charset=utf-8"
  ],
  "produces": [
    "application/json;charset=utf-8"
  ],
  "tags": [
  
    {
      "name": "Appointment",
      "description": ""
    },
    {
      "name": "AvailableSlot",
      "description": ""
    },
    {
      "name": "Hub",
      "description": ""
    }
  ],
  "paths": {
      "/appointment": {
      "post": {
        "tags": [
           "Appointment"
        ],        
        "operationId": "appointmentCreate",
        "summary": "Create an appointment",
        "description": "This operation is used to create an appointment.\nThe specifications document provides  the  list  of  mandatory  and  non-mandatory  attributes  when  creating  an \nappointment, including any possible rule conditions and applicable default values.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "Appointment",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      },
      "get": {
        "tags": [
           "Appointment"
        ],        
        "operationId": "appointmentFind",
        "summary": "List appointments",
        "description": "This operation list appointment entities corresponding to given criteria.\nAttribute selection is enabled for all first level attributes.\nFiltering may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            
              "type": "string"
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Requested index for start of resources to be provided in response requested by client",
            
              "type": "integer",
              "format": "int32"
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Requested number of resources to be provided in response requested by client",
            
              "type": "integer",
              "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
              "$ref": "#/definitions/Appointment"
              }
            },
            "headers": {
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
              "type": "integer",
              "format": "int32"
              },
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
              "type": "integer",
              "format": "int32"
              }
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    },
      "/appointment/{id}": {
      "get": {
        "tags": [
           "Appointment"
        ],        
        "operationId": "appointmentGet",
        "summary": "Retrieve an appointment",
        "description": "This operation retrieves an appointment entity.\nAttribute selection is enabled for all first level attributes.\nFiltering on sub-resources may be available depending on the compliance level supported by an implementation.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "fields",
            "required": false,
            "in": "query",
            "description": "Attribute selection",
            
              "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      },
      "patch": {
        "tags": [
           "Appointment"
        ],        
        "operationId": "appointmentPatch",
        "summary": "Update or cancel an appointment",
        "description": "This operation allows partial updates of an appointment entity. Support of json/merge (https://tools.ietf.org/html/rfc7386) is mandatory, support of json/patch (http://tools.ietf.org/html/rfc5789) is optional. It also can be used to cancel an appointment by modifying its state. The new state is ‘cancelled’.\nThe specifications document provides the list of patchable and not patchable attributes, including constraint rules on \ntheir usage.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Appointment",
            "required": true,
            "in": "body",
            "description": "",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Appointment"
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      },
      "delete": {
        "tags": [
           "Appointment"
        ],        
        "operationId": "appointmentDelete",
        "summary": "Delete an appointment",
        "description": "This operation deletes an appointment entity.\nNote : this operation is available only to ADMIN API users.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    },
      "/availableSlot/search": {
      "post": {
        "tags": [
           "AvailableSlot"
        ],        
        "operationId": "availableSlotSearch",
        "summary": "Check available slots into a calendar to book or reschedule an appointment",
        "description": "This operation is used to retrieve relevant available slots, to book an appointment on, and matching a set \nof criteria. This operation is also used to retrieve relevant available slots for rescheduling an existing appointment.\nThe mandatory and non mandatory attributes and additional rules are described in the specifications document.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "searchCriteria",
            "required": false,
            "in": "body",
            "description": "Criteria used to find availbale slots",
            "schema": {
              "$ref": "#/definitions/SearchTask"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
              "$ref": "#/definitions/AvailableSlot"
              }
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    },
      "/hub": {
      "post": {
        "tags": [
           "Hub"
        ],        
        "operationId": "hubCreate",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information",
            "schema": {
              "$ref": "#/definitions/HubInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Hub"
            }

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    },
      "/hub/{hubId}": {
      "delete": {
        "tags": [
           "Hub"
        ],        
        "operationId": "hubDelete",
        "summary": "Unregister listener",
        "description": "Clears the communication endpoint address that was set by creating the Hub\n\nSpecific business errors for current operation will be encapsulated in\n\nHTTP Response 422 Unprocessable entity\n",
        "deprecated": false,
        
        "parameters": [
          
          {
            "name": "hubId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "204": {
            "description": "Success"

          },
          "400": {
            
            "description": "Bad Request\n\nList of supported error codes:\n- 20: Invalid URL parameter value\n- 21: Missing body\n- 22: Invalid body\n- 23: Missing body field\n- 24: Invalid body field\n- 25: Missing header\n- 26: Invalid header value\n- 27: Missing query-string parameter\n- 28: Invalid query-string parameter value",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "404": {
            
            "description": "Not Found\n\nList of supported error codes:\n- 60: Resource not found",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "405": {
            
            "description": "Method Not Allowed\n\nList of supported error codes:\n- 61: Method not allowed",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "422": {
            
            "description": "Unprocessable entity\n\nFunctional error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          },
          "500": {
            
            "description": "Internal Server Error\n\nList of supported error codes:\n- 1: Internal error",
            "schema": {
            
              "$ref": "#/definitions/ErrorRepresentation"
            }
          }
        }
      }
    }
  },
"definitions": {
    "StateValues": {
      "description": "",
      
      "type": "string",
      "enum": [
        "initialized",
        "confirmed",
        "cancelled",
        "completed",
        "failed"
      ]
    },

    "ErrorRepresentation": {
      "description": "Representation of an error",
      "required": [
          
            "code",
            "reason"
      ],
      "type": "object",
      "properties": {
        "code": {
          "description": "Application related code",
              "type": "integer",
              "format": "int32"
        },
        "reason": {
          "description": "Text that explains the reason for error. This can be shown to a client user.",
              "type": "string"
        },
        "message": {
          "description": "Text that provides more details and corrective actions related to the error. This can be shown to a client user.",
              "type": "string"
        },
        "status": {
          "description": "Http error code extension like 400-2",
              "type": "string"
        },
        "referenceError": {
          "description": "URL pointing to documentation describing the error",
              "type": "string"
        },
        "@type": {
          "description": "Type of the resource",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource",
              "type": "string"
        }
      }
    },

    "Appointment": {
      "description": "An Appointment is an arrangement to do something or meet someone at a particular time, at a place (for face to face appointment) or in a contact medium (for phone appointment).",
      "required": [
          
            "validFor"
      ],
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the appointment",
              "type": "string"
        },
        "href": {
          "description": "Unique URI used to access to the appointment resource",
              "type": "string"
        },
        "externalId": {
          "description": "External reference known by the customer",
              "type": "string"
        },
        "description": {
          "description": "Short free text describing the appointment",
              "type": "string"
        },
        "category": {
          "description": "Business category : intervention for example or to be more precise after SalesIntervention, orderDeliveryIntervention,...",
              "type": "string"
        },
        "state": {
          
           "$ref": "#/definitions/StateValues"
        },
        "creationDate": {
          "description": "Appointment creation date",
              "type": "string",
              "format": "date-time"
        },
        "lastUpdate": {
          "description": "Date of last appointment update",
              "type": "string",
              "format": "date-time"
        },
        "validFor": {
          
              "$ref": "#/definitions/TimePeriod"
        },
        "@baseType": {
          "description": "Indicates the base type of the resource. Here can be appointment",
              "type": "string"
        },
        "@type": {
          "description": "Indicates the type of resource. Here can be appointment",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource",
              "type": "string"
        },
        "attachment": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/Attachment"
          }
        },
        "calendarEntry": {
          
              "$ref": "#/definitions/CalendarEntryRef"
        },
        "relatedParty": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/RelatedPartyRef"
          }
        },
        "place": {
          
              "$ref": "#/definitions/Place"
        },
        "contactMedium": {
          
              "$ref": "#/definitions/ContactMedium"
        },
        "relatedEntity": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/RelatedEntityRef"
          }
        },
        "note": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/Note"
          }
        }
      }
    },

    "TimePeriod": {
      "description": "Time period between a start date time and end date time",
      "type": "object",
      "properties": {
        "startDateTime": {
          "description": "Start date time of the period",
              "type": "string",
              "format": "date-time"
        },
        "endDateTime": {
          "description": "End date time of the period",
              "type": "string",
              "format": "date-time"
        }
      }
    },

    "Attachment": {
      "description": "Attachment documents to the appointment",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the attached document to the appointment",
              "type": "string"
        },
        "href": {
          "description": "Reference of the attached document to the appointment",
              "type": "string"
        },
        "name": {
          "description": "Name of the attached document",
              "type": "string"
        },
        "description": {
          "description": "A short description of the attached document",
              "type": "string"
        },
        "mimeType": {
          "description": "The mime type of the attached document",
              "type": "string"
        },
        "sizeUnit": {
          "description": "Unit of measure used for the size",
              "type": "string"
        },
        "size": {
          "description": "The size in Bytes of the document or attachment. If this component contains the embedded data then the size is the size of the embedded data; if it is a reference without the data then it is the size of the referenced document",
              "type": "number",
              "format": "double"
        },
        "url": {
          "description": "The URL of the attached document",
              "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the attachment",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to schema describing this REST resource",
              "type": "string"
        }
      }
    },

    "RelatedPartyRef": {
      "description": "Related party reference. A related party defines a party linked to the appointment.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of a related party",
              "type": "string"
        },
        "href": {
          "description": "Reference of the related party",
              "type": "string"
        },
        "name": {
          "description": "Name of the related party",
              "type": "string"
        },
        "role": {
          "description": "Role played by the related party (customer, technician,… for example)",
              "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the entity",
              "type": "string"
        }
      }
    },

    "Place": {
      "description": "Describe a place for the appointment (using either geographicAddress or GeographicLocation) and/or identify an existing place (either an existing geographicAddress or existing GeographicLocation or existing GeographicSite) through its id",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of a place - Must be a geographicAddress id or GeographicLocation id or GeographicSite id",
              "type": "string"
        },
        "href": {
          "description": "Reference of a place",
              "type": "string"
        },
        "name": {
          "description": "Short text giving the complete place",
              "type": "string"
        },
        "role": {
          "description": "Role of the place - could be an installation place for example",
              "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of place",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "A link to the schema describing this REST resource",
              "type": "string"
        }
      }
    },

    "RelatedEntityRef": {
      "description": "Related entity reference. Related entity linked to the appointment",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the related entity",
              "type": "string"
        },
        "href": {
          "description": "Reference of the related entity",
              "type": "string"
        },
        "name": {
          "description": "Name of the related entity",
              "type": "string"
        },
        "role": {
          "description": "Role played by the related entity",
              "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the entity",
              "type": "string"
        }
      }
    },

    "Note": {
      "description": "Extra information about the appointment",
      "type": "object",
      "properties": {
        "date": {
          "description": "Date of the note",
              "type": "string",
              "format": "date-time"
        },
        "author": {
          "description": "Author of the note",
              "type": "string"
        },
        "text": {
          "description": "Text of the note",
              "type": "string"
        }
      }
    },

    "Characteristic": {
      "description": "Characteristic of the appointment",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the characteristic",
              "type": "string"
        },
        "value": {
          "description": "Value of the characteristic",
              "type": "string"
        }
      }
    },

    "SearchTask": {
      "description": "This task resource is used to look for available slots before booking an appointment",
      "type": "object",
      "properties": {
        "appointmentId": {
          "description": "Unique identifier of an appointment (used only for rescheduling need)",
              "type": "string"
        },
        "validFor": {
          
              "$ref": "#/definitions/TimePeriod"
        },
        "appointmentWish": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/Characteristic"
          }
        },
        "place": {
          
              "$ref": "#/definitions/Place"
        },
        "relatedParty": {
          
              "$ref": "#/definitions/RelatedPartyRef"
        },
        "relatedEntity": {
          
          "type": "array",
          "items": {
              "$ref": "#/definitions/RelatedEntityRef"
          }
        }
      }
    },

    "AvailableSlot": {
      "description": "Available slots for booking an appointment with a party",
      "type": "object",
      "properties": {
        "validFor": {
          
              "$ref": "#/definitions/TimePeriod"
        },
        "relatedParty": {
          
              "$ref": "#/definitions/RelatedPartyRef"
        }
      }
    },

    "CalendarEntryRef": {
      "description": "Entry in a calendar associated to the appointment",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the calendar entry",
              "type": "string"
        },
        "href": {
          "description": "Reference of the calendar entry",
              "type": "string"
        },
        "description": {
          "description": "A short text describing the calendar entry for this appointment",
              "type": "string"
        },
        "@referredType": {
          "description": "Indicates the (class) type of the calendar entry",
              "type": "string"
        }
      }
    },

    "ContactMedium": {
      "description": "Indicates the contact medium that could be used for the appointment",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of the contact medium : phone number or email address",
              "type": "string"
        },
        "characteristic": {
          
              "$ref": "#/definitions/MediumCharacteristic"
        }
      }
    },

    "MediumCharacteristic": {
      "description": "Describes the characteristics of the contact medium used for the appointment",
      "type": "object",
      "properties": {
        "phoneNumber": {
          "description": "The primary phone number of the contact",
              "type": "string"
        },
        "emailAddress": {
          "description": "Full email address in standard format",
              "type": "string"
        },
        "@type": {
          "description": "Indicates the (class) type of the medium characteristic",
              "type": "string"
        },
        "@schemaLocation": {
          "description": "Link to the schema describing this REST resource",
              "type": "string"
        }
      }
    },

    "Hub": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier of the hub",
              "type": "string"
        },
        "callback": {
          "description": "The callback being registered",
              "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
              "type": "string"
        }
      }
      
    },

    "HubInput": {
      "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",    
      "type": "object",
      "properties": {
        "callback": {
          "description": "The callback being registered",
              "type": "string"
        },
        "query": {
          "description": "Additional data to be passed",
              "type": "string"
        }
      }
      
    }
  }
}
	